
externalInterrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089d  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000773  00000000  00000000  00000b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c5  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007942  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000119  00000000  00000000  0000942a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00009543  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002e77  00000000  00000000  0000957b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__vector_1>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	4e d0       	rcall	.+156    	; 0x122 <main>
  86:	5d c0       	rjmp	.+186    	; 0x142 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <enable_interrupts>:
#include "interruptConfig.h"


 void enable_interrupts()
 {
	 EIMSK |= (1<<INT0);
  8a:	e8 9a       	sbi	0x1d, 0	; 29
	 EICRA |= (1<<ISC01);
  8c:	e9 e6       	ldi	r30, 0x69	; 105
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	82 60       	ori	r24, 0x02	; 2
  94:	80 83       	st	Z, r24
	 sei();
  96:	78 94       	sei
  98:	08 95       	ret

0000009a <interruptConfig>:
 }
 
 void interruptConfig()
 {
	 DDRD &= ~(1<<PIND2);	// Input
  9a:	52 98       	cbi	0x0a, 2	; 10
  9c:	08 95       	ret

0000009e <__vector_1>:
	}
}


ISR(INT0_vect)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
	toggle = 1;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  b8:	9f 91       	pop	r25
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <blink_LED_PORTD>:


void blink_LED_PORTD(uint8_t pinNumber, uint8_t times)
{
	DDRD |= (1 << pinNumber);
  c6:	4a b1       	in	r20, 0x0a	; 10
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	f9 01       	movw	r30, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <blink_LED_PORTD+0xe>
  d0:	ee 0f       	add	r30, r30
  d2:	ff 1f       	adc	r31, r31
  d4:	8a 95       	dec	r24
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <blink_LED_PORTD+0xa>
  d8:	cf 01       	movw	r24, r30
  da:	2e 2f       	mov	r18, r30
  dc:	84 2b       	or	r24, r20
  de:	8a b9       	out	0x0a, r24	; 10
	for (uint8_t i = 0; i < times; i++)
  e0:	66 23       	and	r22, r22
  e2:	f1 f0       	breq	.+60     	; 0x120 <blink_LED_PORTD+0x5a>
  e4:	90 e0       	ldi	r25, 0x00	; 0
	{
		PORTD |= ( 1 << pinNumber );
		_delay_ms(100);
		PORTD &= ~( 1 << pinNumber );
  e6:	3e 2f       	mov	r19, r30
  e8:	30 95       	com	r19
void blink_LED_PORTD(uint8_t pinNumber, uint8_t times)
{
	DDRD |= (1 << pinNumber);
	for (uint8_t i = 0; i < times; i++)
	{
		PORTD |= ( 1 << pinNumber );
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	82 2b       	or	r24, r18
  ee:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	ff ef       	ldi	r31, 0xFF	; 255
  f2:	41 ee       	ldi	r20, 0xE1	; 225
  f4:	54 e0       	ldi	r21, 0x04	; 4
  f6:	f1 50       	subi	r31, 0x01	; 1
  f8:	40 40       	sbci	r20, 0x00	; 0
  fa:	50 40       	sbci	r21, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <blink_LED_PORTD+0x30>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <blink_LED_PORTD+0x3a>
 100:	00 00       	nop
		_delay_ms(100);
		PORTD &= ~( 1 << pinNumber );
 102:	8b b1       	in	r24, 0x0b	; 11
 104:	83 23       	and	r24, r19
 106:	8b b9       	out	0x0b, r24	; 11
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	e1 ee       	ldi	r30, 0xE1	; 225
 10c:	f4 e0       	ldi	r31, 0x04	; 4
 10e:	81 50       	subi	r24, 0x01	; 1
 110:	e0 40       	sbci	r30, 0x00	; 0
 112:	f0 40       	sbci	r31, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <blink_LED_PORTD+0x48>
 116:	00 c0       	rjmp	.+0      	; 0x118 <blink_LED_PORTD+0x52>
 118:	00 00       	nop


void blink_LED_PORTD(uint8_t pinNumber, uint8_t times)
{
	DDRD |= (1 << pinNumber);
	for (uint8_t i = 0; i < times; i++)
 11a:	9f 5f       	subi	r25, 0xFF	; 255
 11c:	69 13       	cpse	r22, r25
 11e:	e5 cf       	rjmp	.-54     	; 0xea <blink_LED_PORTD+0x24>
 120:	08 95       	ret

00000122 <main>:

volatile int toggle = 0;

int main(void)
{
	interruptConfig();
 122:	bb df       	rcall	.-138    	; 0x9a <interruptConfig>
	enable_interrupts();
 124:	b2 df       	rcall	.-156    	; 0x8a <enable_interrupts>
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
	
	while(1)
	{
		if (toggle == 1)
 12a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	d1 f7       	brne	.-12     	; 0x126 <main+0x4>
 132:	62 e0       	ldi	r22, 0x02	; 2
		{
			blink_LED_PORTD(PIND7, 2);
 134:	87 e0       	ldi	r24, 0x07	; 7
 136:	c7 df       	rcall	.-114    	; 0xc6 <blink_LED_PORTD>
 138:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
			toggle = 0;
 13c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 140:	f2 cf       	rjmp	.-28     	; 0x126 <main+0x4>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
